package JunitTest;
	/**
	*импортируем классы из библиотеки junit 
	*/
	import static org.junit.Assert.*; 

	/**
	* Импортируем класс для создания метода который будет выполняться после каждого тестирования 
	*/
	import org.junit.After; 
	/**
	* Импортируем класс для создания метода который будет выполняться до каждого тестирования 
	*/
	import org.junit.Before; 
	/**
	* Импортируем класс для создания теста 
	*/
	import org.junit.Test; 
	/**
	* Импортируем класс для получения нашего результата 
	*/
	import org.junit.runner.JUnitCore; 
	/**
	* Импортируем класс для вывода результата 
	*/
	import org.junit.runner.Result; 

	/**
	* импортируем класс 
	*/
	import Calc.physhicalCalc; 

	/**
	*описываем класс 
	*/
	public class physhicalTest {
	/**
	*указываем на класс для тестирования 
	*/
		private physhicalCalc test;
		
		@Before
	    /**
	* указываем на то, что метод будет выполнятся перед каждым тестируемым методом 
	*/
		public void init() { test = new physhicalCalc(); } 
		
	    @After
	    /**
	* указываем на то, что метод будет выполнятся после каждого тестируемого метода  
	*/
	    public void tearDown() { test = null; } 
	    
	    @Test
		/**
	* создаём метод для теста 
	*/
	    public void testGet(){ 
		/**
	* тестируемый класс 
	*/
	    	test = new physhicalCalc(); 
			/**
	* Проводим верный тест для входных значений время работы 24 часа, время хранения данных 7 дней, количество камер 2, разрешение данной модели камеры 1,1 мб в секунду и предполагаемым результатом 1169.44 
	*/
	    	assertEquals("590.63",test.getK(7, 2, 24, 0.5)); 
		 }
	    
	    
		private physhicalCalc test1;
		
		@Before
	    /**
	* указываем на то, что метод будет выполнятся перед каждым тестируемым методом 
	*/
		public void init1() { test1 = new physhicalCalc(); } 
		
	    @After
	    /**
	* указываем на то, что метод будет выполнятся после каждого тестируемого метода  
	*/
	    public void tearDown1() { test1 = null; } 
	    
	    @Test
		/**
	* создаём метод для теста 
	*/
	    public void testGet1(){ 
		/**
	* тестируемый класс 
	*/
	    	test1 = new physhicalCalc(); 
			/**
	* Проводим верный тест для входных значений время работы 7 часов, время хранения данных 77 дней, количество камер 200, разрешение данной модели камеры 1,1 мб в секунду и предполагаемым результатом 1169.44 
	*/
	    	assertEquals("416882.81",test.getK(77, 200, 7, 1.1)); 
		 }
	    
		private physhicalCalc test2;
		
		@Before
	    /**
	* указываем на то, что метод будет выполнятся перед каждым тестируемым методом 
	*/
		public void init2() { test2 = new physhicalCalc(); } 
		
	    @After
	    /**
	* указываем на то, что метод будет выполнятся после каждого тестируемого метода  
	*/
	    public void tearDown2() { test2 = null; } 
	    
	    @Test
		/**
	* создаём метод для теста 
	*/
	    public void testGet2(){ 
		/**
	* тестируемый класс 
	*/
	    	test2 = new physhicalCalc(); 
			/**
	* Проводим верный тест для входных значений время работы 10 часа, время хранения данных 14 дней, количество камер 2, разрешение данной модели камеры 0,8 мб в секунду и предполагаемым результатом 1169.44 
	*/
	    	assertEquals("787.5",test.getK(14, 2, 10, 0.8)); 
		 }
	    
		private physhicalCalc test3;
		
		@Before
	    /**
	* указываем на то, что метод будет выполнятся перед каждым тестируемым методом 
	*/
		public void init3() { test3 = new physhicalCalc(); } 
		
	    @After
	    /**
	* указываем на то, что метод будет выполнятся после каждого тестируемого метода  
	*/
	    public void tearDown3() { test3 = null; } 
	    
	    @Test
		/**
	* создаём метод для теста 
	*/
	    public void testGet3(){ 
		/**
	* тестируемый класс 
	*/
	    	test3 = new physhicalCalc(); 
			/**
	* Проводим верный тест для входных значений время работы 20 часа, время хранения данных 365 дней, количество камер 1, разрешение данной модели камеры 1,1 мб в секунду и предполагаемым результатом 1169.44 
	*/
	    	assertEquals("15398.44",test.getK(365, 1, 20, 0.6)); 
		 }
}
